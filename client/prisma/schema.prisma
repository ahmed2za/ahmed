// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  COMPANY
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?         @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  role            Role            @default(USER)
  accounts        Account[]
  sessions        Session[]
  reviews         Review[]
  companies       Company[]       @relation("UserCompanies")
  companyViews    CompanyView[]
  companyProfile  Company?        @relation("CompanyProfile")
  notifications   Notification[]
  favorites       CompanyFavorite[]
  comments        Comment[]
  pagesCreated    Page[]          @relation("PageAuthor")
  pagesUpdated    Page[]          @relation("PageEditor")
  postsCreated    BlogPost[]      @relation("BlogAuthor")
  postsUpdated    BlogPost[]      @relation("BlogEditor")
  blogComments    BlogComment[]
  media           Media[]

  @@index([id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id             String           @id @default(cuid())
  name           String
  description    String?
  logo           String?
  coverImage     String?
  address        String?
  city           String?
  country        String?
  phoneNumber    String?
  email          String?
  website        String?
  foundedYear    Int?
  userId         String?         @unique
  user           User?           @relation("CompanyProfile", fields: [userId], references: [id])
  owners         User[]          @relation("UserCompanies")
  categoryId     String?
  mainCategory   Category?       @relation("MainCategory", fields: [categoryId], references: [id])
  reviews        Review[]
  views          CompanyView[]
  comments       Comment[]
  favorites      CompanyFavorite[]
  categories     CompanyCategory[]
  posts          BlogPost[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([userId])
  @@index([categoryId])
}

model Category {
  id              String           @id @default(cuid())
  name            String
  slug            String          @unique
  icon            String?
  companies       Company[]        @relation("MainCategory")
  companyCategories CompanyCategory[]
  posts           BlogPost[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model CompanyCategory {
  id         String   @id @default(cuid())
  companyId  String
  categoryId String
  company    Company  @relation(fields: [companyId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([companyId, categoryId])
  @@index([companyId])
  @@index([categoryId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  companyId String
  user      User     @relation(fields: [userId], references: [id])
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([companyId])
}

model CompanyView {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  user      User     @relation(fields: [userId], references: [id])
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([companyId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  companyId String
  user      User     @relation(fields: [userId], references: [id])
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([companyId])
}

model CompanyFavorite {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  user      User     @relation(fields: [userId], references: [id])
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  message   String
  read      Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
}

model Page {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  published   Boolean  @default(false)
  createdBy   String
  updatedBy   String?
  author      User     @relation("PageAuthor", fields: [createdBy], references: [id])
  editor      User?    @relation("PageEditor", fields: [updatedBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([createdBy])
  @@index([updatedBy])
}

model BlogPost {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  content     String        @db.Text
  published   Boolean       @default(false)
  createdBy   String
  updatedBy   String?
  companyId   String?
  categoryId  String?
  author      User         @relation("BlogAuthor", fields: [createdBy], references: [id])
  editor      User?        @relation("BlogEditor", fields: [updatedBy], references: [id])
  company     Company?     @relation(fields: [companyId], references: [id])
  category    Category?    @relation(fields: [categoryId], references: [id])
  comments    BlogComment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([createdBy])
  @@index([updatedBy])
  @@index([companyId])
  @@index([categoryId])
}

model BlogComment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      BlogPost @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}

model Media {
  id        String   @id @default(cuid())
  type      String
  url       String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
